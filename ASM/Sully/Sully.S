; rdi, rsi, rdx, rcx, r8, r9
	extern dprintf
	extern snprintf
	extern open
	extern close
	extern execve
	SECTION .data
fmt: db "; rdi, rsi, rdx, rcx, r8, r9%c	extern dprintf%c	extern snprintf%c	extern open%c	extern close%c	extern execve%c	SECTION .data%cfmt: db %c%s%c, 0%cfile_fmt: db 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0x2e, 0x53, 0%cfmt_no_exec: db 0x6e, 0x61, 0x73, 0x6d, 0x20, 0x2d, 0x66, 0x20, 0x65, 0x6c, 0x66, 0x36, 0x34, 0x20, 0x25, 0x73, 0x20, 0x2d, 0x6f, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x3b, 0x20, 0x67, 0x63, 0x63, 0x20, 0x2d, 0x6d, 0x36, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x20, 0x2d, 0x6f, 0x20, 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0%cfmt_with_exec: db 0x6e, 0x61, 0x73, 0x6d, 0x20, 0x2d, 0x66, 0x20, 0x65, 0x6c, 0x66, 0x36, 0x34, 0x20, 0x25, 0x73, 0x20, 0x2d, 0x6f, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x3b, 0x20, 0x67, 0x63, 0x63, 0x20, 0x2d, 0x6d, 0x36, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x20, 0x2d, 0x6f, 0x20, 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0x3b, 0x20, 0x2e, 0x2f, 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0%cstr__c: db 0x2d, 0x63, 0%cstr__bin_bash: db 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68, 0%cstr_env: db 0x50, 0x41, 0x54, 0x48, 0x3d, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0%c	SECTION .text%c	global main%cmain:%c	push rbp%c	mov rbp, rsp%c%c	sub rsp, 576 ; 256 for name[256], 256 for command[256] and 16 for int num, fd; 32 for char *array[4]; 16 for char *env[2]%c	lea rax, [rbp-272] ; char name[256];%c	mov DWORD [rbp-4], %d ; int num%c%c	mov rcx, [rbp-4]%c	sub rcx, 1%c	mov rdx, file_fmt%c	mov rsi, 256%c	mov rdi, rax%c	mov rax, 0%c	call snprintf WRT ..plt%c%c	mov rdx, 0o644%c	mov rsi, 577%c	lea rax, [rbp-272]%c	mov rdi, rax%c	mov rax, 0%c	call open WRT ..plt%c	mov DWORD [rbp-8], eax ; int fd%c%c	mov r10, 102%cloop1: push 10%c	dec r10%c	jne loop1%c	mov r11, [rbp-4]%c	dec r11%c	push r11%c	mov r10, 15%cloop2: push 10%c	dec r10%c	jne loop2%c	push 34%c	mov r10, fmt%c	push r10%c	push 34%c	push 10%c	push 10%c	push 10%c	mov r9, 10%c	mov r8, 10%c	mov rcx, 10%c	mov rdx, 10%c	mov rsi, fmt%c	mov edi, DWORD [rbp-8]%c	mov rax, 0%c	call dprintf WRT ..plt%c	add rsp, (7 + 117) * 8%c%c	cmp DWORD [rbp-4], 0%c	jg command_with_exec%c%c	mov r8d, DWORD [rbp-4]%c	dec r8d%c	lea rax, [rbp-272]%c	mov rcx, rax%c	mov rdx, fmt_no_exec%c	mov rsi, 256%c	lea rax, [rbp-528] ; command[256]%c	mov rdi, rax%c	mov rax, 0%c	call snprintf WRT ..plt%c	jmp running_prepared_command%ccommand_with_exec:%c	mov r9d, DWORD [rbp-4]%c	dec r9d%c	mov r8d, DWORD [rbp-4]%c	dec r8d%c	lea rax, [rbp-272]%c	mov rcx, rax%c	mov rdx, fmt_with_exec%c	mov rsi, 256%c	lea rax, [rbp-528]%c	mov rdi, rax%c	mov rax, 0%c	call snprintf WRT ..plt%c%crunning_prepared_command:%c	mov rax, str__bin_bash%c	mov QWORD [rbp-560], rax ; const char *array[4]%c	mov rax, str__c%c	mov QWORD [rbp-552], rax%c	lea rax, [rbp-528]%c	mov QWORD [rbp-544], rax%c	mov QWORD [rbp-536], 0%c%c	mov rax, str_env%c	mov QWORD [rbp-576], rax ; const char *env[2] = {str_env, NULL}%c	mov QWORD [rbp-568], 0%c%c	lea rax, [rbp-576]%c	mov rdx, rax%c	lea rax, [rbp-560]%c	mov rsi, rax%c	mov rdi, str__bin_bash%c	call execve WRT ..plt%c%c	mov edi, DWORD [rbp-8]%c	mov rax, 0%c	call close WRT ..plt%c%c	mov rsp, rbp%c	pop rbp%c	mov rax, 0%c	ret%c", 0
file_fmt: db 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0x2e, 0x53, 0
fmt_no_exec: db 0x6e, 0x61, 0x73, 0x6d, 0x20, 0x2d, 0x66, 0x20, 0x65, 0x6c, 0x66, 0x36, 0x34, 0x20, 0x25, 0x73, 0x20, 0x2d, 0x6f, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x3b, 0x20, 0x67, 0x63, 0x63, 0x20, 0x2d, 0x6d, 0x36, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x20, 0x2d, 0x6f, 0x20, 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0
fmt_with_exec: db 0x6e, 0x61, 0x73, 0x6d, 0x20, 0x2d, 0x66, 0x20, 0x65, 0x6c, 0x66, 0x36, 0x34, 0x20, 0x25, 0x73, 0x20, 0x2d, 0x6f, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x3b, 0x20, 0x67, 0x63, 0x63, 0x20, 0x2d, 0x6d, 0x36, 0x34, 0x20, 0x74, 0x6d, 0x70, 0x2e, 0x6f, 0x20, 0x2d, 0x6f, 0x20, 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0x3b, 0x20, 0x2e, 0x2f, 0x53, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x25, 0x64, 0
str__c: db 0x2d, 0x63, 0
str__bin_bash: db 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x68, 0
str_env: db 0x50, 0x41, 0x54, 0x48, 0x3d, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x3a, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0
	SECTION .text
	global main
main:
	push rbp
	mov rbp, rsp

	sub rsp, 576 ; 256 for name[256], 256 for command[256] and 16 for int num, fd; 32 for char *array[4]; 16 for char *env[2]
	lea rax, [rbp-272] ; char name[256];
	mov DWORD [rbp-4], 5 ; int num

	mov rcx, [rbp-4]
	sub rcx, 1
	mov rdx, file_fmt
	mov rsi, 256
	mov rdi, rax
	mov rax, 0
	call snprintf WRT ..plt

	mov rdx, 0o644
	mov rsi, 577
	lea rax, [rbp-272]
	mov rdi, rax
	mov rax, 0
	call open WRT ..plt
	mov DWORD [rbp-8], eax ; int fd

	mov r10, 102
loop1: push 10
	dec r10
	jne loop1
	mov r11, [rbp-4]
	dec r11
	push r11
	mov r10, 15
loop2: push 10
	dec r10
	jne loop2
	push 34
	mov r10, fmt
	push r10
	push 34
	push 10
	push 10
	push 10
	mov r9, 10
	mov r8, 10
	mov rcx, 10
	mov rdx, 10
	mov rsi, fmt
	mov edi, DWORD [rbp-8]
	mov rax, 0
	call dprintf WRT ..plt
	add rsp, (7 + 117) * 8

	cmp DWORD [rbp-4], 0
	jg command_with_exec

	mov r8d, DWORD [rbp-4]
	dec r8d
	lea rax, [rbp-272]
	mov rcx, rax
	mov rdx, fmt_no_exec
	mov rsi, 256
	lea rax, [rbp-528] ; command[256]
	mov rdi, rax
	mov rax, 0
	call snprintf WRT ..plt
	jmp running_prepared_command
command_with_exec:
	mov r9d, DWORD [rbp-4]
	dec r9d
	mov r8d, DWORD [rbp-4]
	dec r8d
	lea rax, [rbp-272]
	mov rcx, rax
	mov rdx, fmt_with_exec
	mov rsi, 256
	lea rax, [rbp-528]
	mov rdi, rax
	mov rax, 0
	call snprintf WRT ..plt

running_prepared_command:
	mov rax, str__bin_bash
	mov QWORD [rbp-560], rax ; const char *array[4]
	mov rax, str__c
	mov QWORD [rbp-552], rax
	lea rax, [rbp-528]
	mov QWORD [rbp-544], rax
	mov QWORD [rbp-536], 0

	mov rax, str_env
	mov QWORD [rbp-576], rax ; const char *env[2] = {str_env, NULL}
	mov QWORD [rbp-568], 0

	lea rax, [rbp-576]
	mov rdx, rax
	lea rax, [rbp-560]
	mov rsi, rax
	mov rdi, str__bin_bash
	call execve WRT ..plt

	mov edi, DWORD [rbp-8]
	mov rax, 0
	call close WRT ..plt

	mov rsp, rbp
	pop rbp
	mov rax, 0
	ret
